User block functionalities:

Differentiate cia user behavior, actionName.

1. user log in                          actionName="logic"
2. personal preferences                 actionName="userCenter"
3. load in icons                        actionName="userIcon"
4. modify user information              actionName="update"
5. check whether nickname is unique     actionName="uniqueName"
6. user log out                         actionName="logout"

Via UserServlet's service method, get user behavior.

1. get user behavior
    String actionName = request.getParameter("actionName");

2. call corresponded method to the behaviror
    if ("login".equals(actionName)){
          // login
    } else if{
    ...
    }
    ...


I. USER LOGIN

============================front end==========================
1. add in form, set the properties of the form
    action="user"  method="post"  id="loginForm"

2.set value for name, modify value for id
    set value for name and password
    set remember me value
    set a hidden field - actionName, to pass the user behavior

3. in config.js, add events function for the button - checkLogin()
    actually a form check
    1) get name and password
    2) tell if empty or not(reuse function in util.js), if empty, give out notification, else, submit form


============================back end============================
1. get parameters, name, password
2. check whether parameter is empty
    Using ResultInfo to encapsulate results, state, information
    if empty:
        set a state code, and notification
        put ResultInfo in request
        send to login page
    else:
        find user object using user name, is no user name,
            set a state code, and notification
            put ResultInfo in request
            send to login page
        else:
            compare the password given by database with the one given by front end(password should be protected)
            if (password is wrong):
                set a state code, and notification
                put ResultInfo in request
                send to login page
            else:
                store user information to session
                if user choose to remember me, (rem=1), store user information(name, pwd) to cookie and set invalid time
                and respond to client ; if not, clean the original cookie information.

                redirect to index page.

Layers:

    1. web layer (control layer: accept parameter, respond)
        1. get parameter, name, password
        2. use method in service layer, return a ResultInfo object
        3. tell if log in successfully
            fail:
                put ResultInfo to request

                redirect to login page
            success:
                store user information to session
                if user choose to remember me, (rem=1), store user information(name, pwd) to cookie and set invalid time
                and respond to client ; if not, clean the original cookie information.

                redirect to index page.


    2. service layer (parameter check, logic processing)
        1. tell if empty parameters:
            if empty:
                set a state code, and notification
                return ResultInfo

        2. if not empty:
            look up via user name and password

        3. tell if user object is empty:
            if empty:
               set a state code, and notification
               return ResultInfo

            if not:
                compare the password given by database with the one given by front end(password should be protected)
                if (password is wrong):
                    set a state code, and notification
                    put ResultInfo in request
                    send to login page
                else:
                    set a state code, and notification
                    put ResultInfo in request
                    send to login page

    3. dao layer (data access, add/remove/modify/lookup in database)
        using user name, return user object
        1. get data base connection
        2. define sql sentences
        3. pre compile
        4. set parameters
        5. execute look up, return result
        6. analysis result set
        7. close resources



II. User log out
    ++++ back end +++++
    1. destroy session object
    2. delete cookie object
    3. redirect to log in page

    +++ front end +++
    1. set address of the link     user?actionName=logout


III. User center
    ++ front end
    set link
    using EL formula to get info from session field

    ++ back end
    1. set index dynamically included value
    2. request to redirect to index.jsp

IV. loading head icons
    ++ front end
    set img label - src attributes, request back end to load icon

    src="user?actionName=userHead&imageName=image name"  get from session


    ++ back end
    1. get parameters (image name)
    2. get path for the image (request.getServletContext().getRealPath("/");
    3. via image path, get file object
    4. get postfix of the image
    5. via different postfix, set different types of response
    6. FileUtils.copy(), copy the image to browser


V. uniqueness of nickname
    ++ front end
        nickname text frame blur and focus event
        blur:
            1. get value in frame
            2. if value if empty, notify user, disable button
            3. if modified, same as the one in session field?
            4. if same, return
            5. modified, ajax request to test weather nickname is valid


        focus:
            1. clean notification
            2. button enabled

    ++ back end
        web layer:
            1. get parameter
            2. get user info from session
            3. use method in service layer, get result
            4. output stream, respond to ajax method
            5. close resource

        Service layer:
            1. if empty?
            2. empty, return 0
            3. call function in Dao, use userID and nickName, get use object
            4. if user object exist, return 0
            4. else return 1.

        Data access layer:
            1. sql: if any other users using this nickname except me?
                select * from tb_user where nick = ? and userId != ?

            2. set parameter
            3. use baseDao

VI. modify user info

    +++front end
        submit form
        1. form
            type      enctype="multipart/form-data"
            method    method="post"
        2. form element
            set name  (nick name, mood, icon...)
            set hidden field (user behavior, actionName)


    +++back end
        web layer:
            note: file uploading, you must add notation at servlet class!!!!!
            @MultipartConfig
            1. use method in service layer, pass in a whole request object as parameter, return resultInfo
            2. save resultInfo into request field
            3. request to redirect to user center page (user?actionName=userCenter)

        service layer:
            1. get parameters (nickname, mood)
            2. non-empty check
                1ï¼‰ nick name is empty. send error and state code to resultInfo and return

            3. get user object from session field (get user default icon)
            4. uploading file
                1) get part object, request.getPart("name");
                2) via part object, upload file name
                3) check if file name empty
                4) if not, get path of file
            5. update user icon
            6. user dao layer function, rerturn rows that are affected
            7. check rows value
            8. return


        dao layer:

            modify using userId
            1. define sql
                String sql = "update tb_user set nick = ?, mood = ?, head = ? where userId = ?";

            2. set parameters
            3. via baseDao method, update
            4. return number of rows that are affected.

